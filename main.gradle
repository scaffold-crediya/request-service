apply plugin: 'info.solidsoft.pitest.aggregator'

allprojects {
    repositories {
        mavenCentral()
        maven { url = "https://repo.spring.io/snapshot" }
        maven { url = "https://repo.spring.io/milestone" }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'info.solidsoft.pitest'

    compileJava.dependsOn validateStructure

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    //build.dependsOn 'pitest'

    test {
        useJUnitPlatform()
    }

    dependencies {
        implementation 'io.projectreactor:reactor-core'
        implementation 'io.projectreactor.addons:reactor-extra'

        testImplementation 'io.projectreactor.tools:blockhound-junit-platform:1.0.13.RELEASE'

        testImplementation 'io.projectreactor:reactor-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly  "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }

    tasks.withType(Test).configureEach {
        if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
            jvmArgs += [
                    "-XX:+AllowRedefinitionToAddDeleteMethods"
            ]
        }
    }

    test.finalizedBy(project.tasks.jacocoTestReport)

    pitest {
        targetClasses = ['co.com.jhompo.*']
        excludedClasses = []
        excludedTestClasses = []
        pitestVersion = '1.20.1'
        verbose = false
        outputFormats = ['XML', 'HTML']
        threads = 8
        exportLineCoverage = true
        useClasspathFile = true
        timestampedReports = false
        //mutators = ['STRONGER', 'DEFAULTS']
        fileExtensionsToFilter.addAll('xml', 'orbit')
        junit5PluginVersion = '1.2.2'
        failWhenNoMutations = false
        jvmArgs = ["-XX:+AllowRedefinitionToAddDeleteMethods"]
    }


    jacocoTestReport {
        dependsOn test, 'pitest'

        // Exclusiones de Jacoco corregidas
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, excludes: [
                        // Configuraciones y propiedades
                        '**/config/**/*Properties.class',
                        '**/config/**/*Properties$*.class',
                        '**/*Properties.class',
                        '**/*Properties$*.class',

                        // Mensajes y constantes
                        '**/Messages.class',
                        '**/Messages$*.class',
                        '**/*Constants.class',
                        '**/*Constants$*.class',

                        // Aplicación principal
                        '**/MainApplication.class',
                        '**/Application.class',

                        // Configuraciones generales
                        '**/config/**/*.class',
                        '**/infrastructure/config/**/*.class',

                        // Entidades JPA/R2DBC (scaffold)
                        '**/infrastructure/drivenadadapters/jpa/entities/**/*.class',
                        '**/infrastructure/drivenadadapters/r2dbc/entities/**/*.class',
                        '**/r2dbc/**/entities/**/*.class',
                        '**/jpa/**/entities/**/*.class',

                        // DTOs de entry points
                        '**/infrastructure/entrypoints/**/dto/**/*.class',
                        '**/api/dto/**/*.class',
                        '**/dto/**/*.class',

                        // Configuraciones específicas del scaffold
                        '**/infrastructure/drivenadadapters/**/config/**/*.class',
                        '**/infrastructure/entrypoints/**/config/**/*.class',

                        // Helpers y utilidades de configuración
                        '**/r2dbc/helper/**/*.class',
                        '**/r2dbc/config/**/*.class',

                        // Mappers automáticos (si usas MapStruct)
                        '**/*MapperImpl.class',
                        '**/*Mapper$*.class'
                ])
            }))
        }

        reports {
            xml.setRequired true
            xml.setOutputLocation layout.buildDirectory.file("reports/jacoco.xml")
            csv.setRequired false
            html.setOutputLocation layout.buildDirectory.dir("reports/jacocoHtml")
        }
    }

}

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDirectory.set(layout.buildDirectory.dir("reports"))
}

tasks.register('jacocoMergedReport', JacocoReport) {
    dependsOn = [test, subprojects.jacocoTestReport, pitestReportAggregate]
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)

    // APLICAR LAS MISMAS EXCLUSIONES AL REPORTE CONSOLIDADO
    classDirectories.setFrom files(subprojects.sourceSets.main.output).asFileTree.matching {
        exclude '**/config/**/*Properties.class'
        exclude '**/config/**/*Properties$*.class'
        exclude '**/*Properties.class'
        exclude '**/*Properties$*.class'
        exclude '**/Messages.class'
        exclude '**/Messages$*.class'
        exclude '**/*Constants.class'
        exclude '**/*Constants$*.class'
        exclude '**/MainApplication.class'
        exclude '**/Application.class'
        exclude '**/config/**/*.class'
        exclude '**/infrastructure/config/**/*.class'
        exclude '**/infrastructure/drivenadadapters/jpa/entities/**/*.class'
        exclude '**/infrastructure/drivenadadapters/r2dbc/entities/**/*.class'
        exclude '**/r2dbc/**/entities/**/*.class'
        exclude '**/jpa/**/entities/**/*.class'
        exclude '**/infrastructure/entrypoints/**/dto/**/*.class'
        exclude '**/api/dto/**/*.class'
        exclude '**/dto/**/*.class'
        exclude '**/infrastructure/drivenadadapters/**/config/**/*.class'
        exclude '**/infrastructure/entrypoints/**/config/**/*.class'
        exclude '**/r2dbc/helper/**/*.class'
        exclude '**/r2dbc/config/**/*.class'
        exclude '**/*MapperImpl.class'
        exclude '**/*Mapper$*.class'
    }

    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.setRequired true
        csv.setRequired false
        html.setRequired true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}

pitestReportAggregate {
    doLast {
        def reportDir = layout.buildDirectory.dir("reports/pitest").get().asFile
        def consolidatedReport = new File(reportDir, 'mutations.xml')
        consolidatedReport.withWriter { writer ->
            writer.write("<mutations>\n")
            subprojects.each { subproject ->
                def xmlReport = subproject.layout.buildDirectory.file("reports/pitest/mutations.xml").get().asFile
                if (xmlReport.exists()) {
                    def xmlContent = xmlReport.text
                    xmlContent = xmlContent.replaceAll("<\\?xml[^>]*>", "")
                    xmlContent = xmlContent.replaceAll("</?mutations( partial=\"true\")?>", "")
                    writer.write(xmlContent.trim() + "\n")
                }
            }
            writer.write("</mutations>")
        }
    }
}

tasks.named('wrapper') {
    gradleVersion = '8.14.3'
}